pragma solidity 0.6.6;
contract HelloWorld{
    struct Person{
        string name; 
        uint height; 
        uint age;
        bool senior;
        //a person who is of older age 
    }
    
mapping (address => Person) private people;

function createPerson (string memory name, uint height,uint age) public{
    require (age < 150, "people must be below the age of 150");
    
    Person memory NewPerson;
    NewPerson.name=name;
    NewPerson.height=height;
    NewPerson.age=age;
  
    if (age>= 65){
    NewPerson.senior=true;
    }
    else{
        NewPerson.senior=false;
    }
    
    insertPerson (NewPerson);
}
    
function insertPerson (Person memory NewPerson) private{
        address creator = msg.sender;
        people[creator]=NewPerson;
        // made the createperson function look nice because you took two sentences and paste them here and you have a private 
        //visibility function because the insertPerson function is hidden
        // we linked the insertPerson function to the createPerson function with "(Person memory NewPerson)""
    
}

    function getPerson ()public view returns (string memory name, uint age, uint height, bool senior){
         address creator = msg.sender;
         //the one who will get the info when introducing the address will be only the message sender
        return (people[creator].name, people [creator].age, people [creator].height, people[creator].senior);
    }
}
